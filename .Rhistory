}
}
}
}
}
}
}
}
}
}
}
x <- 0
}
counter <- 0
vec1 <- c(2:150000)
x <- 0
is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) {
abs(x - round(x)) < tol
}
for (each in vec1){
if (each %% 2 != 0){
x <- x + 1
if (each %% 3 != 0){
x <- x + 1
if (each %% 4 != 0){
x <- x + 1
if (each %% 5 != 0){
x <- x + 1
if (each %% 6 != 0){
x <- x + 1
if (each %% 7 != 0){
x <- x + 1
if (each %% 8 != 0){
x <- x + 1
if (each %% 9 != 0){
x <- x + 1
if (each %% 10 != 0){
x <- x + 1
if (each %% 11 != 0){
x <- x + 1
if (x == 10 && is.wholenumber(sqrt(each)) == FALSE){
counter <- counter + 1
print(each)
if (counter == 10001){
prime <- each
print(prime)
}
}
}
}
}
}
}
}
}
}
}
}
x <- 0
}
counter <- 0
vec1 <- c(2:150000)
x <- 0
is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) {
abs(x - round(x)) < tol
}
for (each in vec1){
if (each %% 2 != 0){
x <- x + 1
if (each %% 3 != 0){
x <- x + 1
if (each %% 4 != 0){
x <- x + 1
if (each %% 5 != 0){
x <- x + 1
if (each %% 6 != 0){
x <- x + 1
if (each %% 7 != 0){
x <- x + 1
if (each %% 8 != 0){
x <- x + 1
if (each %% 9 != 0){
x <- x + 1
if (each %% 10 != 0){
x <- x + 1
if (each %% 11 != 0){
x <- x + 1
if (x == 10 && is.wholenumber(sqrt(each)) == FALSE){
counter <- counter + 1
if (counter == 10001){
prime <- each
print(prime)
}
}
}
}
}
}
}
}
}
}
}
}
x <- 0
}
setwd("C:\\Users\\Whitn\\OneDrive\\Desktop\\BIO247")
knitr::opts_chunk$set(echo = TRUE)
vecab <- c(1:700)
vecc <- sqrt(vecab^2 +vecab^2)
vecc
vecab <- c(1:700)
vecc <- c(1)
answer <- c()
for (each in vecab){
for (each2 in vecab){
vecc <- sqrt(each^2 + each2^2)
if (vecc[1]+each+each2 == 1000){
print(each)
print(each2)
print(vecc)
}
}
}
vecab <- c(1:700)
vecc <- c(1)
answer <- c()
for (each in vecab){
for (each2 in vecab){
vecc <- sqrt(each^2 + each2^2)
if (vecc[1]+each+each2 == 1000){
print(each)
print(each2)
print(vecc)
}
}
}
print(each*each2*vecc)
vecab <- c(1:700)
vecc <- c(1)
answer <- c()
for (each in vecab){
for (each2 in vecab){
vecc <- sqrt(each^2 + each2^2)
if (vecc[1]+each+each2 == 1000){
product <- each*each2*vecc
print(product)
}
}
}
1000/15
vec1 <- 3*(1:333)
vec2 <- 5*(1:199)
vec3 <- 15*(1:66)
vec1 <- 3*(1:333)
vec2 <- 5*(1:199)
vec3 <- 15*(1:66)
answer <- sum(vec1) + sum(vec2)
1000/5
1000/3
vec1 <- 3*(1:333)
vec2 <- 5*(1:199)
vec3 <- 15*(1:66)
answer <- sum(vec1) + sum(vec2) - sum(vec3)
print(answer)
product(1:100)
knitr::opts_chunk$set(echo = TRUE)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
product(1:3)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:10)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:10)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:100)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:10)
vec1 <- as.numeric(strsplit(as.character(temp),"")[[1]])
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:10)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
sum(vec1)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:100)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
sum(vec1)
vec1 <- product(1:100)
vec1
scipen = n
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:100)
format(vec1, scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
sum(vec1)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:100)
format(vec1, scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:10)
format(vec1, scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:10)
vec1 <- format(vec1, scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:100)
vec1 <- format(vec1, scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- product(1:100)
vec1 <- format(vec1, scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
vec1
is.wholenumber <- function(x, tol = .Machine$double.eps^0.5) {
abs(x - round(x)) < tol
}
is.wholenumber(5)
knitr::opts_chunk$set(echo = TRUE)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- format(product(1:100), scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- format(product(1:10), scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- format(product(100:1), scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
vec1 <- format(product(1:100), scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
options(scipen=100)
product(1:100)
options(scipen=200)
product(1:100)
product <- function(vec){
out <- 1
for(i in 1:length(vec)){
out <- out*vec[i]
}
out
}
options(scipen=200)
vec1 <- product(1:100)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
prod(1:10)
options(scipen=200)
vec1 <- prod(1:100)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
vec1 <- format(prod(1:100), scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
vec1 <- format(prod(1:10), scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
vec1 <- format(prod(1:100), scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
vec1 <- format(prod(1:100), scientific = FALSE)
vec1
vec1 <- format(prod(100:1), scientific = FALSE)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec2 <- sum(vec1)
print(vec2)
vec1 <- as.numeric(strsplit(as.character(vec1),"")[[1]])
vec1
vec1 <- format(prod(100:1), scientific = FALSE)
vec1
install(gmp)
install("mgp")
install("gmp")
install.packages("gmp")
library(gmp)
veca <- c(2:5)
vec1 <- c()
for (each in veca){
for (each2 in veca){
append(vec1, each^each2)
}
}
veca <- c(2:5)
vec1 <- c()
for (each in veca){
for (each2 in veca){
temp <- each^each2
append(vec1, temp)
}
}
help(append)
veca <- c(2:5)
vec1 <- c()
for (each in veca){
for (each2 in veca){
temp <- each^each2
vec1 <- c(vec1, temp)
}
}
veca <- c(2:5)
vec1 <- c()
for (each in veca){
for (each2 in veca){
temp <- each^each2
vec1 <- c(vec1, temp)
}
}
print(length(unique(vec1)))
veca <- c(2:100)
vec1 <- c()
for (each in veca){
for (each2 in veca){
temp <- each^each2
vec1 <- c(vec1, temp)
}
}
print(length(unique(vec1)))
vec2 <- c(1,2,3)
vec2^2
vec1 <- c(10:1000)
vec2 <- c()
for (each in vec1){
temp <- as.numeric(strsplit(as.character(each),"")[[1]])
temp2 <- temp^4
if (sum(temp2) == each){
vec2 <- c(vec2, each)
}
}
print(vec2)
vec1 <- c(10:10000)
vec2 <- c()
for (each in vec1){
temp <- as.numeric(strsplit(as.character(each),"")[[1]])
temp2 <- temp^4
if (sum(temp2) == each){
vec2 <- c(vec2, each)
}
}
print(vec2)
vec1 <- c(10:10000)
vec2 <- c()
for (each in vec1){
temp <- as.numeric(strsplit(as.character(each),"")[[1]])
temp2 <- temp^5
if (sum(temp2) == each){
vec2 <- c(vec2, each)
}
}
print(vec2)
vec1 <- c(10:100000)
vec2 <- c()
for (each in vec1){
temp <- as.numeric(strsplit(as.character(each),"")[[1]])
temp2 <- temp^5
if (sum(temp2) == each){
vec2 <- c(vec2, each)
}
}
print(vec2)
vec1 <- c(10:1000000)
vec2 <- c()
for (each in vec1){
temp <- as.numeric(strsplit(as.character(each),"")[[1]])
temp2 <- temp^5
if (sum(temp2) == each){
vec2 <- c(vec2, each)
}
}
print(vec2)
vec1 <- c(4000:10000000)
vec2 <- c()
for (each in vec1){
temp <- as.numeric(strsplit(as.character(each),"")[[1]])
temp2 <- temp^5
if (sum(temp2) == each){
vec2 <- c(vec2, each)
}
}
print(vec2)
vec1 <- c(4000:1000000)
vec2 <- c()
for (each in vec1){
temp <- as.numeric(strsplit(as.character(each),"")[[1]])
temp2 <- temp^5
if (sum(temp2) == each){
vec2 <- c(vec2, each)
}
}
print(sum(vec2))
