}
}
}
unqpotgenes11<-unique(potgenes11)
Chr11Genes <- data.frame(potSNP11)
Chr11Genes$potgenes11 <- potgenes11
knitr::opts_chunk$set(echo = TRUE)
Chr22DataNCBI <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/Chr22DataNCBI.xlsx")
Chr22DataNCBI <- Chr22DataNCBI[,1:3]
temp <- c()
generang <- c()
for (each in Chr22DataNCBI$`human position`){
temp <- unlist(strsplit(each, ':'))
temp2 <- temp[2]
temp3 <- unlist(strsplit(temp2, " "))
temp4 <- temp3[1]
generang <- c(generang, temp4)
}
Chr22DataNCBI$gene.range <- generang
startpos <- c()
endpos <- c()
for (each in Chr22DataNCBI$gene.range){
temp <- unlist(strsplit(each, "-"))
temp2 <- gsub(",", "", temp)
startpos <- c(startpos, as.numeric(temp2[1])/1000000)
endpos <- c(endpos, as.numeric(temp2[2])/1000000)
}
Chr22DataNCBI$startpos <- startpos
Chr22DataNCBI$endpos <- endpos
row <- c(1:length(MainData$SNP))
chr22 <- c()
for (each in row){
if (MainData[each,2]=="22"){
chr22 <- c(chr22, as.numeric(MainData[each,3]))
}
}
library(ggplot2)
testdf <- data.frame("initial"= chr22)
testdf$binnedchr22 <- cut(chr22, c(0, 10, 20, 30, 40, 50))
ggplot(testdf)+geom_bar(aes(x=binnedchr22))
freqtable22 <- as.data.frame(table(testdf$binnedchr22))
mean <- mean(freqtable22$Freq)
sd <- sd(freqtable22$Freq)
onesd <- 1+sd
twosd <- 1+2*sd
over68 <- c()
over95 <- c()
row <- c(1:length(freqtable22$Freq))
for (each in row){
if (freqtable22[each,'Freq']> onesd && freqtable22[each,'Freq'] < twosd){
over68 <- c(over68, freqtable22[each,'Var1'])
} else if (freqtable22[each,'Freq'] >= twosd){
over95 <- c(over95, freqtable22[each,'Var1'] )
}
}
print(over68)
print(over95)
row <- c(1:length(MainData$SNP))
chr22 <- c()
SNP22 <- c()
for (each in row){
if (MainData[each,2]=="22"){
if (MainData[each,3]>30 && MainData[each,3]<=40){
chr22 <- c(chr22, as.numeric(MainData[each,3]))
SNP22 <- c(SNP22, MainData[each, 'SNP'])
}
}
}
data.frame("SNP"=SNP22,"Position.bp"=chr22)
potSNP22 <- c()
potgenes22 <- c()
row <- c(1:length(Chr22DataNCBI$startpos))
for (each in chr22){
for (each2 in row){
if (each >= Chr22DataNCBI[each2,'startpos'] && each <= Chr22DataNCBI[each2,'endpos']){
potSNP22 <- c(potSNP22, each)
potgenes22 <- c(potgenes22, Chr22DataNCBI[each2,3])
}
}
}
unqpotgenes22<-unique(potgenes22)
Chr22Genes <- data.frame(potSNP22)
Chr22Genes$potgenes22 <- potgenes22
knitr::opts_chunk$set(echo = TRUE)
Chr11Genes$chr <- 11
Chr6Genes$chr <- "06"
genedata <- data.frame("chr"=c(Chr6Genes$chr, Chr11Genes$chr))
genedata$bp <- c(Chr6Genes$potSNP6, Chr11Genes$potSNP11)
genedata$potgene <- c(Chr6Genes$potgenes6, Chr11Genes$potgenes11)
row <- c(1:length(MainData$Position.Mb))
temp <- c()
for (each in row){
for (each2 in genedata$bp){
if (each2 == MainData$Position.Mb[each]){
temp <- c(temp, MainData$SNP[each])
}
}
}
genedata$SNP <- temp
NCBIGeneDescrData <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/NCBIGeneDescrData.xlsx")
genedata$officialsymbol <- NCBIGeneDescrData$officialsymbol
genedata$fullname <- NCBIGeneDescrData$fullname
genedata$description <- NCBIGeneDescrData$description
genedata$simpdesc <- NCBIGeneDescrData$simple
library(readxl)
BAT2path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/BAT2path.xlsx")
HLADRB1path <- HLADRB1path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/HLADRB1path.xlsx", sheet = "Sheet2")
LRRC16Apath <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/LRRC16Apath.xlsx")
SLC17A1path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/SLC17A1path.xlsx")
PPP1R10path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/PPP1R10path.xlsx")
LTApath <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/LTApath.xlsx")
SLC44A4path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/SLC44A4path.xlsx")
ZKSCAN3path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/ZKSCAN3path.xlsx")
ZKSCAN12path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/ZKSCAN12path.xlsx")
OR5T2path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/OR5T2path.xlsx")
SMTNL1path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/SMTNL1path.xlsx")
CCDC15path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/CCDC15path.xlsx")
TMEM218path <- read_excel("C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Project/BIO247ProjectArticles/TMEM218path.xlsx")
genedata$pathways <- c(BAT2path, HLADRB1path, LRRC16Apath, SLC17A1path, PPP1R10path, LTApath, SLC44A4path, ZKSCAN3path, ZKSCAN12path, OR5T2path, SMTNL1path, CCDC15path, TMEM218path)
temp <- c()
pathways <- c()
for (each in genedata$pathways){
temp <- unlist(strsplit(each, ","))
pathways <- c(pathways, temp)
}
pathways <- na.omit(pathways)
length(pathways)
length(unique(pathways))
unqpathways <- unique(pathways)
df <- as.data.frame(table(pathways))
vect <- c()
for (each in df$pathways){
if (each %in% BAT2path$pathways){
vect <- c(vect, ", BAT2")
} else
vect <- c(vect, "no")
}
vect2 <- c()
for (each in df$pathways){
if (each %in% HLADRB1path$pathways){
vect2 <- c(vect2, "HLADRB1")
} else
vect2 <- c(vect2, "no")
}
path <- paste(vect, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% LRRC16Apath$pathways){
vect2 <- c(vect2, "LRRC16A")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% SLC17A1path$pathways){
vect2 <- c(vect2, "SLC17A1")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% PPP1R10path$pathways){
vect2 <- c(vect2, "PPP1R10")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% LTApath$pathways){
vect2 <- c(vect2, "LTA")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% SLC44A4path$pathways){
vect2 <- c(vect2, "SLC44A4")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% ZKSCAN3path$pathways){
vect2 <- c(vect2, "ZKSCAN3")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% ZKSCAN12path$pathways){
vect2 <- c(vect2, "ZKSCAN12")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% OR5T2path$pathways){
vect2 <- c(vect2, "OR5T2")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% SMTNL1path$pathways){
vect2 <- c(vect2, "SMTNL1")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% CCDC15path$pathways){
vect2 <- c(vect2, "CCDC15")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
vect2 <- c()
for (each in df$pathways){
if (each %in% TMEM218path$pathways){
vect2 <- c(vect2, "TMEM218")
} else
vect2 <- c(vect2, "no")
}
path <- paste(path, vect2, sep=", ")
temp <- c()
temp <- gsub("no", "", path)
temp2 <- gsub(", ,",",",temp)
temp3 <- gsub(", ,",",",temp2)
temp4 <- gsub(", ,",",",temp3)
temp5 <- gsub(", ,",",",temp4)
temp6 <- sub(".{2}", "", temp5)
temp7 <- sub(".{2}$", "", temp6)
df$genes <- temp7
View(df)
View(genedata)
#given GRange data
gr <- GRanges(seqname=c("chr1", "chr1", "chr2", "chr3","chr1", "chr6", "chr2", "chr3","chr1", "chr4", "chr2", "chr4","chr10", "chr1", "chr2", "chr6","chr1", "chr", "chr6", "chr3"),
ranges=IRanges(start=c(2, 3, 5, 7, 9, 12, 13, 16, 18, 22, 23, 26, 30, 36, 38, 41, 46, 56, 57, 59), end=c(19,19,18,26,13,24,21,31,35,25,26,44,33,39,54,50,57,60,74,74)),
strand=c("+", "-", "-", "+","+", "-", "-", "+","+", "-", "-", "+","+", "-", "-", "+","+", "-", "-", "+"),identifier=letters[1:20])
#finding which width is the largest in gr
max(width(gr))
#because 20 is largest, there will be only one item that is >=20, so I can find the other answers using this
gr[width(gr)>=max(width(gr))]
#this shows chr3, range 7-26, +, d
#Therefore the answer is that it is 20 bp width, chr3, with identifier 'd'
# uploading FASTQ file
fastq <- read.table('C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Lecture/BIO247Exams/BIO247Exam2/Exam 2/Gene_compare.fastq', header=FALSE,sep="|",fill=TRUE)
#making vectors with indices since the file is "name, seq, +, score"
name <- seq(1, length(fastq$V1), by=4)
seq <- seq(2, length(fastq$V1), by=4)
score <- seq(4, length(fastq$V1), by=4)
#using vectors from above to make vectors of name, sequence, and scorechar
Name <- fastq$V1[name]
Sequence <- fastq$V1[seq]
Score_char <- fastq$V1[score]
Score_val = c()
#creating initial data frame
fastq_data <- data.frame(Name, Sequence, Score_char)
#finding corresponding ASCII-Sanger-PHRED scores for both samples
for (x in 1:length(fastq_data$Name)){
score_num = c()
char <- unlist(strsplit(fastq_data$Score_char[x],""))
for (a in char){
score_num <- append(score_num,utf8ToInt(a)-33)
}
Score_val <- append(Score_val,list(score_num))
}
# adding each list of score values to a column in the dataframe
for (i in 1:(length(Score_val))){
fastq_data$Score_val[i] <- list(Score_val[i])
}
#making each sample's score value into a vector (not list)and definding a vector as the difference in scores for each bp
samp1 <- unlist(fastq_data$Score_val[1])
samp2 <- unlist(fastq_data$Score_val[2])
sampdiff <- samp1-samp2
#finding which sample has more "wins" for each bp (if sampdiff[each] is positive, that means the score in samp1 is higher; if sampdiff[each] is negative, that meanst the score in samp2 is higher)
samp1freq <- c(0)
samp2freq <- c(0)
eqfreq <- c(0)
for (each in sampdiff){
if (each>0){
samp1freq <- samp1freq+1
} else if (each<0){
samp2freq <- samp2freq+2
} else
eqfreq <- eqfreq+1
}
samp1freq
samp2freq
eqfreq
#samp1freq > samp2freq, so sample1 probably has better quality
#quick check of average score for each sample to see if it agrees
mean(samp1)
mean(samp2)
#sample 1 mean > sample 2 mean, so this agrees that sample1 probably has better quality
View(fastq)
View(fastq_data)
install.packages('ggthemes')
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("GenomicRanges")
library(ggplot2)
library('Biostrings')
library(writexl)
library(IRanges)
library(GenomicRanges)
library(ggthemes)
#given IRange data
x <- IRanges(start=c(2, 16, 28, 33, 56, 2, 30, 68), end=c(12, 23, 30, 35, 70, 2, 30, 68))
names(x) <- c('1','2','3','4','5','A','B','C')
#setting up parameters for ggplot; saved y, ymin, ymax, start, end, width into df 'out' for simplicity
sep=0.5
height=0.5
out <- as.data.frame(x)
out$y <- disjointBins(x)
out$ymin <- out$y * (sep + height) - height
out$ymax <- out$ymin + height
xmin <- min(out$start)
xmax <- max(out$end)
xbreaks <- seq(0, xmax, by=5)
xlabels <- seq(0, xmax, by=5)
#plot
ggplot(out) + geom_rect(aes(ymin=ymin, ymax=ymax, xmin=start-0.5, xmax=end+0.5)) + geom_text(aes(x=start + width/2 - 0.5, y=ymin+(ymax-ymin)/2, label=names), size=8, color="grey") + scale_x_continuous(breaks=xbreaks, labels=xlabels) + xlab("") + ylab("") + theme(axis.text.y=element_blank()) + theme(panel.grid.major=element_blank(), panel.grid.minor.y=element_blank(), axis.ticks=element_blank(), theme=theme_tufte())
#given IRange data
x <- IRanges(start=c(2, 16, 28, 33, 56, 2, 30, 68), end=c(12, 23, 30, 35, 70, 2, 30, 68))
names(x) <- c('1','2','3','4','5','A','B','C')
#setting up parameters for ggplot; saved y, ymin, ymax, start, end, width into df 'out' for simplicity
sep=0.5
height=0.5
out <- as.data.frame(x)
out$y <- disjointBins(x)
out$ymin <- out$y * (sep + height) - height
out$ymax <- out$ymin + height
xmin <- min(out$start)
xmax <- max(out$end)
xbreaks <- seq(0, xmax, by=5)
xlabels <- seq(0, xmax, by=5)
#plot
ggplot(out) + geom_rect(aes(ymin=ymin, ymax=ymax, xmin=start-0.5, xmax=end+0.5)) + geom_text(aes(x=start + width/2 - 0.5, y=ymin+(ymax-ymin)/2, label=names), size=8, color="grey") + scale_x_continuous(breaks=xbreaks, labels=xlabels) + xlab("") + ylab("") + theme(axis.text.y=element_blank()) + theme(panel.grid.major=element_blank(), panel.grid.minor.y=element_blank(), axis.ticks=element_blank(), theme_tufte())
#given IRange data
x <- IRanges(start=c(2, 16, 28, 33, 56, 2, 30, 68), end=c(12, 23, 30, 35, 70, 2, 30, 68))
names(x) <- c('1','2','3','4','5','A','B','C')
#setting up parameters for ggplot; saved y, ymin, ymax, start, end, width into df 'out' for simplicity
sep=0.5
height=0.5
out <- as.data.frame(x)
out$y <- disjointBins(x)
out$ymin <- out$y * (sep + height) - height
out$ymax <- out$ymin + height
xmin <- min(out$start)
xmax <- max(out$end)
xbreaks <- seq(0, xmax, by=5)
xlabels <- seq(0, xmax, by=5)
#plot
ggplot(out) + geom_rect(aes(ymin=ymin, ymax=ymax, xmin=start-0.5, xmax=end+0.5)) + geom_text(aes(x=start + width/2 - 0.5, y=ymin+(ymax-ymin)/2, label=names), size=8, color="grey") + scale_x_continuous(breaks=xbreaks, labels=xlabels) + xlab("") + ylab("") + theme(axis.text.y=element_blank()) + theme(panel.grid.major=element_blank(), panel.grid.minor.y=element_blank(), axis.ticks=element_blank(),theme_tufte)
#given IRange data
x <- IRanges(start=c(2, 16, 28, 33, 56, 2, 30, 68), end=c(12, 23, 30, 35, 70, 2, 30, 68))
names(x) <- c('1','2','3','4','5','A','B','C')
#setting up parameters for ggplot; saved y, ymin, ymax, start, end, width into df 'out' for simplicity
sep=0.5
height=0.5
out <- as.data.frame(x)
out$y <- disjointBins(x)
out$ymin <- out$y * (sep + height) - height
out$ymax <- out$ymin + height
xmin <- min(out$start)
xmax <- max(out$end)
xbreaks <- seq(0, xmax, by=5)
xlabels <- seq(0, xmax, by=5)
#plot
ggplot(out) + geom_rect(aes(ymin=ymin, ymax=ymax, xmin=start-0.5, xmax=end+0.5)) + geom_text(aes(x=start + width/2 - 0.5, y=ymin+(ymax-ymin)/2, label=names), size=8, color="grey") + scale_x_continuous(breaks=xbreaks, labels=xlabels) + xlab("") + ylab("") + theme(axis.text.y=element_blank()) + theme(theme_tufte)
#given IRange data
x <- IRanges(start=c(2, 16, 28, 33, 56, 2, 30, 68), end=c(12, 23, 30, 35, 70, 2, 30, 68))
names(x) <- c('1','2','3','4','5','A','B','C')
#setting up parameters for ggplot; saved y, ymin, ymax, start, end, width into df 'out' for simplicity
sep=0.5
height=0.5
out <- as.data.frame(x)
out$y <- disjointBins(x)
out$ymin <- out$y * (sep + height) - height
out$ymax <- out$ymin + height
xmin <- min(out$start)
xmax <- max(out$end)
xbreaks <- seq(0, xmax, by=5)
xlabels <- seq(0, xmax, by=5)
#plot
ggplot(out) + geom_rect(aes(ymin=ymin, ymax=ymax, xmin=start-0.5, xmax=end+0.5)) + geom_text(aes(x=start + width/2 - 0.5, y=ymin+(ymax-ymin)/2, label=names), size=8, color="grey") + scale_x_continuous(breaks=xbreaks, labels=xlabels) + xlab("") + ylab("") + theme(axis.text.y=element_blank()) + theme(panel.grid.major=element_blank(), panel.grid.minor.y=element_blank(), axis.ticks=element_blank())
#SNP A overlaps with gene 1, SNP B overlaps with gene 3, SNP C overlaps with gene 5
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::install("GenomicRanges")
library(ggplot2)
library('Biostrings')
library(writexl)
library(IRanges)
library(GenomicRanges)
#given IRange data
x <- IRanges(start=c(2, 16, 28, 33, 56, 2, 30, 68), end=c(12, 23, 30, 35, 70, 2, 30, 68))
names(x) <- c('1','2','3','4','5','A','B','C')
#setting up parameters for ggplot; saved y, ymin, ymax, start, end, width into df 'out' for simplicity
sep=0.5
height=0.5
out <- as.data.frame(x)
out$y <- disjointBins(x)
out$ymin <- out$y * (sep + height) - height
out$ymax <- out$ymin + height
xmin <- min(out$start)
xmax <- max(out$end)
xbreaks <- seq(0, xmax, by=5)
xlabels <- seq(0, xmax, by=5)
#plot
ggplot(out) + geom_rect(aes(ymin=ymin, ymax=ymax, xmin=start-0.5, xmax=end+0.5)) + geom_text(aes(x=start + width/2 - 0.5, y=ymin+(ymax-ymin)/2, label=names), size=8, color="grey") + scale_x_continuous(breaks=xbreaks, labels=xlabels) + xlab("") + ylab("") + theme(axis.text.y=element_blank()) + theme(panel.grid.major=element_blank(), panel.grid.minor.y=element_blank(), axis.ticks=element_blank())
#SNP A overlaps with gene 1, SNP B overlaps with gene 3, SNP C overlaps with gene 5
#given GRange data
gr <- GRanges(seqname=c("chr1", "chr1", "chr2", "chr3","chr1", "chr6", "chr2", "chr3","chr1", "chr4", "chr2", "chr4","chr10", "chr1", "chr2", "chr6","chr1", "chr", "chr6", "chr3"),
ranges=IRanges(start=c(2, 3, 5, 7, 9, 12, 13, 16, 18, 22, 23, 26, 30, 36, 38, 41, 46, 56, 57, 59), end=c(19,19,18,26,13,24,21,31,35,25,26,44,33,39,54,50,57,60,74,74)),
strand=c("+", "-", "-", "+","+", "-", "-", "+","+", "-", "-", "+","+", "-", "-", "+","+", "-", "-", "+"),identifier=letters[1:20])
#finding which width is the largest in gr
max(width(gr))
#because max is largest, there will be only one item that is >=max, so I can find the other answers using this
gr[width(gr)>=max(width(gr))]
#this shows chr3, range 7-26, +, d
#Therefore the answer is that it is 20 bp width, chr3, with identifier 'd'
#uploading fasta file as "forfasta" and saving as dataframe "fordf"
forfasta <- readDNAStringSet('C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Lecture/BIO247Exams/BIO247Exam2/Exam 2/Forest_Seqs.fasta')
seq_name = names(forfasta)
sequence = paste(forfasta)
fordf = data.frame(seq_name,sequence)
#making a vector of all seq names that begin with "MPM" because those are his initials
MPM <- c()
row <- 1:length(fordf$seq_name)
for (each in fordf$seq_name){
if (grepl("MPM", each)){
MPM <- c(MPM, each)
}
}
#using a loop to find corresponding sequences to seq names found above
row <- c(1:length(fordf$seq_name))
MPMseq <- c()
for (each in row){
for (each2 in MPM){
if (each2 == fordf$seq_name[each]){
MPMseq <- c(MPMseq, fordf$sequence[each])
}
}
}
#making a dataframe and saving as an excel file to send
MPMdf <- data.frame("seqname"=MPM, "sequence"=MPMseq)
write_xlsx(MPMdf, "C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Lecture/BIO247Exams/BIO247Exam2/Exam 2/DomicoMPMdf.xlsx")
# uploading FASTQ file
fastq <- read.table('C:/Users/Whitn/OneDrive/Desktop/BIO247/BIO247Lecture/BIO247Exams/BIO247Exam2/Exam 2/Gene_compare.fastq', header=FALSE,sep="|",fill=TRUE)
#making vectors with indices since the file is "name, seq, +, score"
name <- seq(1, length(fastq$V1), by=4)
seq <- seq(2, length(fastq$V1), by=4)
score <- seq(4, length(fastq$V1), by=4)
#using vectors from above to make vectors of name, sequence, and scorechar
Name <- fastq$V1[name]
Sequence <- fastq$V1[seq]
Score_char <- fastq$V1[score]
Score_val = c()
#creating initial data frame
fastq_data <- data.frame(Name, Sequence, Score_char)
#finding corresponding ASCII-Sanger-PHRED scores for both samples
for (x in 1:length(fastq_data$Name)){
score_num = c()
char <- unlist(strsplit(fastq_data$Score_char[x],""))
for (a in char){
score_num <- append(score_num,utf8ToInt(a)-33)
}
Score_val <- append(Score_val,list(score_num))
}
# adding each list of score values to a column in the dataframe
for (i in 1:(length(Score_val))){
fastq_data$Score_val[i] <- list(Score_val[i])
}
#making each sample's score value into a vector (not list)and definding a vector as the difference in scores for each bp
samp1 <- unlist(fastq_data$Score_val[1])
samp2 <- unlist(fastq_data$Score_val[2])
sampdiff <- samp1-samp2
#finding which sample has more "wins" for each bp (if sampdiff[each] is positive, that means the score in samp1 is higher; if sampdiff[each] is negative, that meanst the score in samp2 is higher)
samp1freq <- c(0)
samp2freq <- c(0)
eqfreq <- c(0)
for (each in sampdiff){
if (each>0){
samp1freq <- samp1freq+1
} else if (each<0){
samp2freq <- samp2freq+2
} else
eqfreq <- eqfreq+1
}
samp1freq
samp2freq
eqfreq
#samp1freq > samp2freq, so sample1 probably has better quality
#quick check of average score for each sample to see if it agrees
mean(samp1)
mean(samp2)
#sample 1 mean > sample 2 mean, so this agrees that sample1 probably has better quality
